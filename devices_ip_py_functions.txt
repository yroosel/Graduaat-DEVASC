### This script creates a JSON structure based on information an excel spreadsheet
### You have to understand Python dict and Python lists
### Contact yvan.rooseleer@biasc.be if you have questions
### It's up to you to ### WRITE YOUR OWN CODE ### where this is indicated
### Validate your JSON structure
### Use print statements to understand return values and return types
### There is a simplified solution (main2) and a more difficult solution (main)
###
import xlrd
import json
### In order to complete the task is is necessary to study the "rules" below 
### RULES
inventory_dict         = {}  #### {"interface": "gi0/1", "ip_address": "1.2.2.1", "subnet_mask": "255.255.255.0", "device": "dv"
inventory_list         = []  #### [inventory_dict]  
interface_dict         = {}  #### {"interface": "gi0/1", "ip_address": "1.2.2.1", "subnet_mask": "255.255.255.0"}
interface_list         = []  #### [interface_dict]    
dev_dict               = {}  #### {"device": {dev_name": "n", "role": "r", interfaces": interface_list}}
dev_list               = []  #### [dev_dict]  
rack_struc             = {}  #### {dev_dict_list}
rack_struc["rack"]     = []
###
### Writing functions simplifies coding
def find_all_device_interfaces(xlf):  
    ### READ EXCEL FILE AND RETURN NUMBER OF ROWS
    wb = xlrd.open_workbook(xlf)
    sheet = wb.sheet_by_index(0)
    number_rows = sheet.nrows
    loc_interfaces = []
    for r in range(number_rows):
        if r > 0: ### first row contains columns names
            COL_A =  sheet.cell_value(r, 0)  #### column A
            COL_B =  sheet.cell_value(r, 1)  #### column B
            COL_C =  sheet.cell_value(r, 2)  #### column C
            COL_D =  sheet.cell_value(r, 3)  #### column D
            COL_E =  sheet.cell_value(r, 4)  #### column E
            inventory_dict["device"]      = COL_A
            inventory_dict["role"]        = COL_B
            inventory_dict["interface"]   = COL_C 
            inventory_dict["ipaddress"]   = COL_D
            inventory_dict["subnetmask"]  = COL_E
            loc_interfaces.append(inventory_dict.copy()) # need to use copy()
    return loc_interfaces

def make_list_of_devices_and_roles(loc_list):  ### used by main()
    loc_g = []
    mem   = {}
    g     = {}
    for rec in loc_list:
        g["dev_name"] = rec["device"]
        g["role"]     = rec["role"]
        if mem != g["dev_name"]:
            loc_g.append(g.copy())  # need to use copy()
        mem = g["dev_name"]
    #del loc_g[0] ### if last item copied as first item
    return loc_g

def make_list_of_devices(loc_list):  ### used by main2()
    loc_g = []
    mem = None
    for rec in loc_list:
        g = rec["device"]
        if mem != g:
            loc_g.append(g)
        mem = g
    return loc_g

def attach_interfaces_to_devices(loc_device, loc_inventory):    
    loc_dev_dict = {}
    loc_list = [loc_dev_dict]
    for item in loc_inventory:
        if item["device"] == loc_device:
            if item["device"] != None:
                loc_dev_dict["interface"]   = item["interface"]
                loc_dev_dict["ipaddress"]   = item["ipaddress"]
                loc_dev_dict["subnetmask"]  = item["subnetmask"]
                loc_list.append(loc_dev_dict.copy()) # need to use copy()
    del loc_list[0] ### if last item copied as first item
    return loc_list
        
#### MAIN ####   
def main2(): ### no role for devices, only device name
    inventory_list = find_all_device_interfaces("devices_ip.xlsx")
    dev_list       = make_list_of_devices(inventory_list)  
    for device_rec in dev_list:
        intf_list = attach_interfaces_to_devices(device_rec, inventory_list)
        dev_dict["device"] = { "device": {"dev_name": device_rec , "interfaces": intf_list }} 
        rack_struc["rack"].append(dev_dict["device"])
    js_rack = json.dumps(rack_struc)

def main(): ### role added for devices
    inventory_list = ### WRITE YOUR OWN CODE ###
    dev_list       = ### WRITE YOUR OWN CODE ###
    for device_rec in dev_list:
        intf_list = ### WRITE YOUR OWN CODE ###
        dev_dict["device"] = ### WRITE YOUR OWN CODE ###
        rack_struc["rack"].append(dev_dict["device"])
    js_rack = json.dumps(rack_struc)

#### execute main() when called directly        
if __name__ == '__main__':
    main() ### alternatively: main2()
